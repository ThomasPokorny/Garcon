/*
 * This file is generated by jOOQ.
 */
package garcon.generated.garcon.tables;


import garcon.generated.garcon.Garcon;
import garcon.generated.garcon.Indexes;
import garcon.generated.garcon.Keys;
import garcon.generated.garcon.tables.records.DishRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dish extends TableImpl<DishRecord> {

    private static final long serialVersionUID = 987855898;

    /**
     * The reference instance of <code>garcon.dish</code>
     */
    public static final Dish DISH = new Dish();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DishRecord> getRecordType() {
        return DishRecord.class;
    }

    /**
     * The column <code>garcon.dish.id</code>.
     */
    public final TableField<DishRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('garcon.dish_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>garcon.dish.name</code>.
     */
    public final TableField<DishRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>garcon.dish.description</code>.
     */
    public final TableField<DishRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>garcon.dish.allergenes</code>.
     */
    public final TableField<DishRecord, String> ALLERGENES = createField("allergenes", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>garcon.dish.price</code>.
     */
    public final TableField<DishRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>garcon.dish.discount</code>.
     */
    public final TableField<DishRecord, BigDecimal> DISCOUNT = createField("discount", org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>garcon.dish.categories</code>.
     */
    public final TableField<DishRecord, Integer[]> CATEGORIES = createField("categories", org.jooq.impl.SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * Create a <code>garcon.dish</code> table reference
     */
    public Dish() {
        this(DSL.name("dish"), null);
    }

    /**
     * Create an aliased <code>garcon.dish</code> table reference
     */
    public Dish(String alias) {
        this(DSL.name(alias), DISH);
    }

    /**
     * Create an aliased <code>garcon.dish</code> table reference
     */
    public Dish(Name alias) {
        this(alias, DISH);
    }

    private Dish(Name alias, Table<DishRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dish(Name alias, Table<DishRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dish(Table<O> child, ForeignKey<O, DishRecord> key) {
        super(child, key, DISH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Garcon.GARCON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISH_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DishRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DISH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DishRecord> getPrimaryKey() {
        return Keys.DISH_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DishRecord>> getKeys() {
        return Arrays.<UniqueKey<DishRecord>>asList(Keys.DISH_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dish as(String alias) {
        return new Dish(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dish as(Name alias) {
        return new Dish(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dish rename(String name) {
        return new Dish(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dish rename(Name name) {
        return new Dish(name, null);
    }
}
